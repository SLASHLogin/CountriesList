@page "/"
@using System.Text.Json

<PageTitle>Countries List</PageTitle>

<UseGetContinents Context="result" Strategy="ExecutionStrategy.CacheFirst">
    <ChildContent>

        @{
            _continents = result.Continents.ToDictionary(continent => continent.Code, continent => new Continent(continent.Code, continent.Name, continent.Countries.Select(country => new PartialCountry(country.Code, country.Name)).ToList()));
        }

        <select @onchange="SelectContinent">
            <option value="" selected disabled>Select a continent</option>
            @foreach (var continent in result.Continents!)
            {
                <option value="@continent!.Code">@continent.Name</option>
            }
        </select>

        <input type="number" min="2" max="10" step="1" @onchange="ChangeNumberOfCountries" value="5"/>
    </ChildContent>
    <ErrorContent>
        Something went wrong ...<br/>
        @result.First().Message
    </ErrorContent>
    <LoadingContent>
        <p>Loading continents...</p>
    </LoadingContent>
</UseGetContinents>

@if (_selectedContinent is not null)
{
    <h3>Random countries of @_selectedContinent</h3>

    <table class="table">
        <thead>
        <th>Official Name</th>
        <th>Capital</th>
        <th>Population</th>
        <th>Currency</th>
        <th>Subregion</th>
        <th>Languages</th>
        </thead>
        <tbody>
        @foreach (var country in _selectedCountries)
        {
            <tr>

                @if (country.name is not null)
                {
                    <td>@country.name.official</td>
                }
                else
                {
                    <td>"No information found!"</td>
                }
                
                @if (country.capital.FirstOrDefault() is not null)
                {
                    <td>@country.capital.FirstOrDefault()</td>
                }
                else
                {
                    <td>"No information found!"</td>
                }
                
                @if (country.population is not null)
                {
                    <td>@country.population?.ToString("N0")</td>
                }
                else
                {
                    <td>"No information found!"</td>
                }
                
                @if (country.currencies.Values.FirstOrDefault()?.name is not null)
                {
                    <td>@country.currencies.Values.FirstOrDefault()?.name</td>
                }
                else
                {
                    <td>"No information found!"</td>
                }
                
                @if (country.subregion is not null)
                {
                    <td>@country.subregion</td>
                }
                else
                {
                    <td>"No information found!"</td>
                }
                <td>@string.Join(", ", country.languages.Values)</td>
            </tr>
        }
        </tbody>
    </table>
}

@code
{
    private Dictionary<string, Continent> _continents = new Dictionary<string, Continent>();

    private string? _selectedContinent;

    private IEnumerable<Country> _selectedCountries = new List<Country>();
    private IEnumerable<string> _selectedCountryNames = new List<string>();

    private int _numberOfCountries = 5;

    private async Task ChangeNumberOfCountries(ChangeEventArgs args)
    {
        await Task.Run(async () =>
        {
    // Clamp to min and max
            _numberOfCountries = Math.Clamp(int.Parse(args.Value?.ToString() ?? "5"), 2, 10);

            if (_selectedContinent is not null)
            {
                await SelectRandomCountries();
            }

            return _numberOfCountries;
        });
    }

    private async Task SelectContinent(ChangeEventArgs args)
    {
        await Task.Run(async () =>
        {
            _selectedContinent = args.Value?.ToString();

            await SelectRandomCountries();

            return _selectedContinent;
        });
    }

    private async Task SelectRandomCountries()
    {
        _selectedCountries = new List<Country>();
        _selectedCountryNames = new List<string>();

        foreach (var continent in _continents)
        {
            if (continent.Key == _selectedContinent)
            {
                foreach (var country in continent.Value.Countries)
                {
                    _selectedCountryNames = _selectedCountryNames.Append(country.Name);
                }
            }
        }

    // Select random country codes  
        while (_selectedCountries.Count() < _numberOfCountries)
        {
            var random = new Random();
            var randomNames = _selectedCountryNames.OrderBy(c => random.Next()).Take(_numberOfCountries);

    // Get country objects from country codes
            foreach (var name in randomNames)
            {
                var country = await Country.GetCountry(name);

                _selectedCountries = _selectedCountries.Append(country);
            }
        }

        _selectedCountries = _selectedCountries.OrderBy(c => c.name.official);

        StateHasChanged();
    }

    public class Country
    {
        public Name? name { get; set; }
        public List<string> capital { get; set; } = new List<string>();
        public int? population { get; set; }
        public Dictionary<string, Currency> currencies { get; set; } = new Dictionary<string, Currency>();
        public string? subregion { get; set; }
        public Dictionary<string, string> languages { get; set; } = new Dictionary<string, string>();

        public static async Task<Country> GetCountry(string code)
        {
    // Normalize code
            code = code.Trim().ToUpper();

    // Create country object from country code by calling the API
            var client = new HttpClient();
            client.BaseAddress = new Uri("https://restcountries.com/v3.1/name/"); // TODO: move to config

            var response = await client.GetAsync(code);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var countries = JsonSerializer.Deserialize<List<Country>>(json);

                return countries.First();
            }
            else
            {
                throw new Exception($"Error: {response.StatusCode}");
            }
        }
    }

    public class Name
    {
        public string official { get; set; }
    }

    public class Currency
    {
        public string? name { get; set; }
        public string? symbol { get; set; }
    }

    public class Continent
    {
        public string? Code { get; set; }
        public string? Name { get; set; }
        public List<PartialCountry> Countries { get; set; } = new List<PartialCountry>();

        public Continent(string code, string name, List<PartialCountry> countries)
        {
            Code = code;
            Name = name;
            Countries = countries;
        }
    }

    public class PartialCountry
    {
        public string Name { get; set; }
        public string Code { get; set; }

        public PartialCountry(string code, string name)
        {
            Name = name;
            Code = code;
        }
    }
}